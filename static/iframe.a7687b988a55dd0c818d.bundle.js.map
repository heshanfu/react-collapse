{"version":3,"file":"static/iframe.a7687b988a55dd0c818d.bundle.js","sources":["webpack:///./src/components/Collapse/Collapse.jsx"],"sourcesContent":["import './collapse.scss';\nimport React from 'react';\n\nconst COLLAPSED = 'collapsed';\nconst COLLAPSING = 'collapsing';\nconst EXPANDING = 'expanding';\nconst EXPANDED = 'expanded';\n\nexport default class Collapse extends React.Component {\n  state = {\n    collapse: this.props.isOpen ? EXPANDED : COLLAPSED,\n    collapseStyle: {\n      maxHeight: this.props.collapseHeight || '0px',\n      visibility: this.props.collapseHeight ? '' : 'hidden',\n    },\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      transition,\n      render,\n      elementType,\n      collapseHeight, // exclude from attrs\n      onChange, // exclude from attrs\n      isOpen, // exclude from attrs\n      ...attrs\n    } = this.props;\n\n    const style = {\n      transition,\n      ...this.state.collapseStyle,\n    };\n\n    const getRender = () => {\n      if (typeof render === 'function') {\n        return render(this.state.collapse);\n      }\n      return children;\n    };\n\n    const ElementType = elementType || 'div';\n    const collapseClassName = `${className || 'collapse-css-transition'} -is-${this.state.collapse}`;\n\n    return (\n      <ElementType\n        ref={element => {\n          this.content = element;\n        }}\n        style={style}\n        className={collapseClassName}\n        onTransitionEnd={this.onTransitionEnd}\n        {...attrs}\n      >\n        {getRender()}\n      </ElementType>\n    );\n  }\n\n  getCollapseHeight = () => this.props.collapseHeight || '0px';\n\n  getCollapsedVisibility = () => (this.props.collapseHeight ? '' : 'hidden');\n\n  static getDerivedStateFromProps(props, state) {\n    const isOpen = state.collapse === EXPANDED || state.collapse === EXPANDING;\n\n    if (!isOpen && props.isOpen) {\n      return { collapse: EXPANDING };\n    }\n    if (isOpen && !props.isOpen) {\n      return { collapse: COLLAPSING };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.state.collapse === EXPANDED) this.setExpanded();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('componentDidUpdate');\n\n    if (!this.content) return;\n\n    if (this.state.collapse === prevState.collapse) return;\n\n    console.log('componentDidUpdate - real work');\n\n    this.updateStyleStateFromCollapseState();\n  }\n\n  updateStyleStateFromCollapseState = () => {\n    switch (this.state.collapse) {\n      case EXPANDING:\n        this.setExpanding();\n        break;\n      case COLLAPSING:\n        this.setCollapsing();\n        break;\n      case EXPANDED:\n        this.setExpanded();\n        break;\n      case COLLAPSED:\n        this.setCollapsed();\n        break;\n      // no default\n    }\n  };\n\n  onTransitionEnd = ({ target, propertyName }) => {\n    console.log('onTransitionEnd', this.state.collapse, propertyName);\n\n    if (target === this.content && propertyName === 'max-height') {\n      switch (this.state.collapse) {\n        case EXPANDING:\n          this.setState({ collapse: EXPANDED });\n          break;\n        case COLLAPSING:\n          this.setState({ collapse: COLLAPSED });\n          break;\n        // no default\n      }\n    }\n  };\n\n  getHeight = () => `${this.content.scrollHeight}px`;\n\n  getOnChangeCallback = () =>\n    this.props.onChange\n      ? () =>\n          this.props.onChange({\n            ...this.state,\n            transition: this.props.transition,\n            isMoving: isMoving(this.state.collapse),\n          })\n      : () => {};\n\n  setCollapsed = () => {\n    console.log('setCollapsed');\n\n    if (!this.content) return;\n\n    this.setState(\n      {\n        collapseStyle: {\n          maxHeight: this.getCollapseHeight(),\n          visibility: this.getCollapsedVisibility(),\n        },\n      },\n      this.getOnChangeCallback()\n    );\n  };\n\n  setCollapsing = () => {\n    console.log('setCollapsing');\n\n    if (!this.content) return;\n\n    const maxHeight = this.getHeight();\n\n    this.setState({\n      collapseStyle: {\n        maxHeight,\n        visibility: '',\n      },\n    });\n\n    nextFrame(() => {\n      this.setState(\n        {\n          collapseStyle: {\n            maxHeight: this.getCollapseHeight(),\n            visibility: '',\n          },\n        },\n        this.getOnChangeCallback()\n      );\n    });\n  };\n\n  setExpanding = () => {\n    console.log('setExpanding');\n\n    nextFrame(() => {\n      if (this.content) {\n        const maxHeight = this.getHeight();\n\n        this.setState(\n          {\n            collapseStyle: {\n              maxHeight,\n              visibility: '',\n            },\n          },\n          this.getOnChangeCallback()\n        );\n      }\n    });\n  };\n\n  setExpanded = () => {\n    console.log('setExpanded');\n\n    if (!this.content) return;\n\n    this.setState(\n      {\n        collapseStyle: {\n          maxHeight: '',\n          visibility: '',\n        },\n      },\n      this.getOnChangeCallback()\n    );\n  };\n}\n\n/*\nfunction afterFrame(callback) {\n  // https://nolanlawson.com/2018/09/25/accurately-measuring-layout-on-the-web/\n  // https://github.com/andrewiggins/yield-to-browser\n  requestAnimationFrame(() => setTimeout(callback, 0));\n}\n*/\n\nfunction nextFrame(callback) {\n  // Ensure it is always visible on collapsing\n  requestAnimationFrame(() => requestAnimationFrame(callback));\n}\n\nfunction isMoving(collapse) {\n  return collapse === EXPANDING || collapse === COLLAPSING;\n}\n"],"mappings":"AAGA","sourceRoot":""}